/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package caro.client;

import caro.common.Coordinate;
import caro.common.State;
import caro.common.KMessage;
import caro.common.Users;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

public class Main extends javax.swing.JFrame implements IReceiveMessage{

    ServerListener serverListener;
    //PanelBoard windowPanel;
    
    CaroTable caroTable;
    JScrollPane jScroll;

    int GameState = 0;
    static final int WAIT     = 0;
    static final int MY_TURN  = 1;
    static final int YOU_WIN  = 2;
    static final int YOU_LOSE = 3;
    /**
     * Creates new form Main
     */
    public Main(ServerListener serverListener, String s) {
        initComponents();

        setTitle("Game Caro");
        
        lable_room_number.setText("Room" + s);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(1000, 700);

        setLayout(new BorderLayout());
        //windowPanel = new PanelBoard(socket);
        //add("Center", windowPanel);
        btn_rematch.setVisible(false);
        
        InitGame();
        setLocationRelativeTo(null);

        this.serverListener = serverListener;
        this.serverListener.receive = this;
        
        try {
            serverListener.sendMessage(28, null); //Lay thong tin 2 ng
            serverListener.sendMessage(30, null); //Lay ban co
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void InitGame() {

        caroTable = new CaroTable();
        caroTable.setPreferredSize(new Dimension(500,500));
        
        //jScroll = new JScrollPane(goban);
        //Panel frame = new Panel();
        //frame.add(goban);
        //panelCaro.add(goban);
        panelCaro.setViewportView(caroTable);

        caroTable.init(500, 500);
        caroTable.initialize();
        caroTable.draw();
    }

    void putStatus(String strStt) {
        lable_status.setText(strStt);
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lable_name_1 = new javax.swing.JLabel();
        lable_name_2 = new javax.swing.JLabel();
        lable_status = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lable_score_1 = new javax.swing.JLabel();
        lable_score_2 = new javax.swing.JLabel();
        txt_chat = new javax.swing.JTextField();
        txt_send_chat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_chat_history = new javax.swing.JTextArea();
        btn_exit_room = new javax.swing.JButton();
        panelCaro = new javax.swing.JScrollPane();
        btn_rematch = new javax.swing.JButton();
        lable_room_number = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lable_name_1.setText("                  ");
        lable_name_1.setToolTipText("");

        lable_name_2.setText("                    ");

        lable_status.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lable_status.setText("Waiting your opponent...");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("X");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("O");

        lable_score_1.setText("Score:    ");

        lable_score_2.setText("Score:     ");

        txt_chat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_chatKeyReleased(evt);
            }
        });

        txt_send_chat.setText("Send");
        txt_send_chat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_send_chatMouseClicked(evt);
            }
        });

        txt_chat_history.setEditable(false);
        txt_chat_history.setColumns(20);
        txt_chat_history.setRows(5);
        jScrollPane1.setViewportView(txt_chat_history);

        btn_exit_room.setText("Exit Room");
        btn_exit_room.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_exit_roomMouseClicked(evt);
            }
        });
        btn_exit_room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exit_roomActionPerformed(evt);
            }
        });

        panelCaro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelCaroMouseClicked(evt);
            }
        });

        btn_rematch.setText("Rematch");
        btn_rematch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rematchActionPerformed(evt);
            }
        });

        lable_room_number.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelCaro, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_chat, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_send_chat, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lable_score_1)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lable_name_1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lable_room_number, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lable_score_2)
                                    .addComponent(lable_name_2)))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_rematch, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(118, 118, 118)
                                .addComponent(btn_exit_room, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lable_status, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lable_name_1)
                            .addComponent(jLabel4)
                            .addComponent(lable_room_number))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lable_score_1)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lable_name_2))
                        .addGap(8, 8, 8)
                        .addComponent(lable_score_2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_chat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_send_chat, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelCaro, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lable_status, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_exit_room, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btn_rematch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_exit_roomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_exit_roomMouseClicked
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_btn_exit_roomMouseClicked

    private void panelCaroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelCaroMouseClicked
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        
        if (GameState == MY_TURN) {
            Coordinate coordinate = new Coordinate();
            int offetX = caroTable.getX();
            int offetY = caroTable.getY();

            if (!caroTable.getPosition(x-offetX, y-offetY, coordinate))
                return;

            if (caroTable.stateses[coordinate.x][coordinate.y].State == State.EMPTY) {
                try {
                    GameState = WAIT;
                    putStatus("Waiting...");
                    serverListener.sendMessage(30, coordinate);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else {
                putStatus("Cannot play here");
            }
        }

    }//GEN-LAST:event_panelCaroMouseClicked

    private void txt_send_chatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_send_chatMouseClicked
        // TODO add your handling code here:
        String strMess = serverListener.user.getUsername() + ": " + txt_chat.getText();
        if (txt_chat_history.getText().isEmpty())
            txt_chat_history.setText(strMess);
        else
            txt_chat_history.setText(txt_chat_history.getText()+'\n'+strMess);
        txt_chat.setText("");
        try {
            serverListener.sendMessage(40, strMess);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_txt_send_chatMouseClicked

    private void txt_chatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_chatKeyReleased
        if (evt.getKeyChar()=='\n')
            txt_send_chatMouseClicked(null);
    }//GEN-LAST:event_txt_chatKeyReleased

    private void btn_rematchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rematchActionPerformed
        int choice = JOptionPane.showConfirmDialog(this,"Do you want to rematch?", "Rematch?", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            try {
                serverListener.sendMessage(11, null);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_rematchActionPerformed

    private void btn_exit_roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exit_roomActionPerformed
        try {
            serverListener.sendMessage(39, null);   
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                    new RoomFrame(serverListener).setVisible(true);
                }
            });
            this.dispose();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_exit_roomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                System.out.println("CLIENT");
//                new Main(null).setVisible(true);
//            }
//        });
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_exit_room;
    private javax.swing.JButton btn_rematch;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lable_name_1;
    private javax.swing.JLabel lable_name_2;
    private javax.swing.JLabel lable_room_number;
    private javax.swing.JLabel lable_score_1;
    private javax.swing.JLabel lable_score_2;
    private javax.swing.JLabel lable_status;
    private javax.swing.JScrollPane panelCaro;
    private javax.swing.JTextField txt_chat;
    private javax.swing.JTextArea txt_chat_history;
    private javax.swing.JButton txt_send_chat;
    // End of variables declaration//GEN-END:variables


    
    @Override
        public void receiveMessage(KMessage msg) throws IOException {
        switch (msg.getType()) {
            case 11: { //someone wants to rematch
                int choice = JOptionPane.showConfirmDialog(this, "Your opponent want to rematch", "Rematch", JOptionPane.YES_NO_OPTION);
                if (choice == 0) {
                    serverListener.sendMessage(11, null);
                } else {
                    serverListener.sendMessage(12, null);
                }
                break;
            }
            
            case 12: { //opponent refuses to rematch
                JOptionPane.showMessageDialog(this, "Your opponent doesn't want to rematch!");
                break;
            }
            
            case 13: { //opponent wins
                int score2 = Integer.parseInt(lable_score_2.getText());
                lable_score_2.setText("" + (++score2));
                break;
            }
            
            case 30: { // cai ban co moi
                caroTable.stateses = (State[][]) msg.getObject();
                caroTable.draw();
                break;
            }
            case 31: {
                putStatus("Your turn");
                GameState = MY_TURN;
                break;
            }
            
            case 32: {
                putStatus("Waiting your opponent...");
                break;
            } 
            
            case 34: { // Thong tin 2 ng choi 
                Users[] arrUser = (Users[]) msg.getObject();
                if (arrUser != null && arrUser.length >= 2) {
                    lable_name_1.setText(arrUser[0].getUsername());
                    lable_score_1.setText("0");
                    lable_name_2.setText(arrUser[1].getUsername());
                    lable_score_2.setText("0");
                    btn_rematch.setVisible(true);
                }
                break;
            }
            
            case 35: {
                if ("win".equalsIgnoreCase(msg.getObject().toString())) {
                    GameState = YOU_WIN;
                    int score1 = Integer.parseInt(lable_score_1.getText());
                    lable_score_1.setText("" + (++score1));
                    serverListener.sendMessage(13, null);
                    putStatus("YOU WIN!!!");
                } else if ("lose".equalsIgnoreCase(msg.getObject().toString())) {
                    GameState = YOU_LOSE;
                    putStatus("YOU LOSE....");
                } else {
//                    putStatus("Exit match!");
                    JOptionPane.showMessageDialog(this, "Your opponent was out!");
                    btn_exit_roomActionPerformed(null);
                }
                //System.out.println(msg.getObject());
                break;
                
            }      
            
            case 40: { // Recieve Message
                String strMess = msg.getObject().toString();
                if (txt_chat_history.getText().isEmpty())
                    txt_chat_history.setText(strMess);
                else
                    txt_chat_history.setText(txt_chat_history.getText()+'\n'+strMess);
                break;
            }   
        }
    }
}
